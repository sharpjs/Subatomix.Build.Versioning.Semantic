<Project>

  <!--
    Copyright 2020 Subatomix Research Inc.

    Permission to use, copy, modify, and distribute this software for any
    purpose with or without fee is hereby granted, provided that the above
    copyright notice and this permission notice appear in all copies.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
    WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
    MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
    ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
    WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
    ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
    OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
  -->

  <!-- Delete stamp file during clean -->
  <ItemGroup>
    <Clean Include="$(StampFilePath)" />
  </ItemGroup>

  <!-- Target to generate stamp file explicitly -->
  <Target Name="Stamp"
          DependsOnTargets="CheckBranchVersion;PrintVersion;GenerateStampFile" />

  <!-- Generate stamp file before multi-target build if requested -->
  <Target Name="StampBeforeCrossTargeting"
          Condition="'$(TargetFrameworks)' != '' And '$(TargetFramework)' == '' And '$(StampOnBuild)' == 'true'"
          BeforeTargets="DispatchToInnerBuilds"
          DependsOnTargets="Stamp" />

  <!-- Generate stamp file before single-target build if requested -->
  <Target Name="StampBeforeSingleBuild"
          Condition="'$(TargetFrameworks)' == '' And '$(TargetFramework)' != '' And '$(StampOnBuild)' == 'true'"
          BeforeTargets="BeforeBuild"
          DependsOnTargets="Stamp" />

  <!-- Check/print version early in non-stamped multi-target build -->
  <Target Name="PrintVersionBeforeCrossTargeting"
          Condition="'$(TargetFrameworks)' != '' And '$(TargetFramework)' == '' And '$(VersionSuffixIsFromStamp)' != 'true' And '$(StampOnBuild)' != 'true'"
          BeforeTargets="DispatchToInnerBuilds"
          DependsOnTargets="CheckBranchVersion;PrintVersion" />

  <!-- Check/print version early in non-stamped single-target build -->
  <Target Name="PrintVersionBeforeSingleBuild"
          Condition="'$(TargetFrameworks)' == '' And '$(TargetFramework)' != '' And '$(VersionSuffixIsFromStamp)' != 'true' And '$(StampOnBuild)' != 'true'"
          BeforeTargets="BeforeBuild"
          DependsOnTargets="CheckBranchVersion;PrintVersion" />

  <!-- Check branch version against code version -->
  <Target Name="CheckBranchVersion" Condition="'$(BranchVersion)' != ''">
    <Error Condition="'$(BranchVersion)' != '$(VersionPrefix)'"
           Text="Branch version '$(BranchVersion)' does not match code version '$(VersionPrefix)'."/>
  </Target>

  <!-- Communicate version number to build agents -->
  <Target Name="PrintVersion">
    <Message Condition="$(SetAzurePipelinesBuildName)" Importance="high" Text="##vso[build.updatebuildnumber]$(Version)" />
    <Message Condition="$(SetTeamCityBuildNumber)"     Importance="high" Text="##teamcity[buildNumber '$(Version)']" />
    <WriteLinesToFile
      Condition="$(SetGitHubActionsVersion) And '$(GITHUB_OUTPUT)' != ''"
      File="$(GITHUB_OUTPUT)"
      Lines="version=$(Version)" />
  </Target>

  <!-- Actual stamp file generation target -->
  <Target Name="GenerateStampFile" >
    <Error Condition="'$(StampFilePath)' == ''"
           Text="To generate a stamp file, the MSBuild property StampFilePath must be set." />

    <PropertyGroup>
      <_StampFileContent>
<![CDATA[
<!-- Generated by MSBuild Stamp target -->
<Project>
  <PropertyGroup>
    <VersionSuffixIsFromStamp Condition="'%24(VersionSuffix)'    == ''">true</VersionSuffixIsFromStamp>
    <VersionSuffix            Condition="'%24(VersionSuffix)'    == ''">$(NewVersionSuffix)</VersionSuffix>
    <RepositoryBranch         Condition="'%24(RepositoryBranch)' == ''">$(RepositoryBranch)</RepositoryBranch>
    <RepositoryCommit         Condition="'%24(RepositoryCommit)' == ''">$(RepositoryCommit)</RepositoryCommit>
  </PropertyGroup>
</Project>
]]>
      </_StampFileContent>
      <_StampMessage>
<![CDATA[
Wrote stamp file $(StampFilePath)
  ├─VersionSuffix:    $(NewVersionSuffix)
  ├─RepositoryBranch: $(RepositoryBranch)
  └─RepositoryCommit: $(RepositoryCommit)
]]>
      </_StampMessage>
    </PropertyGroup>

    <WriteLinesToFile File="$(StampFilePath)" Lines="$(_StampFileContent)"
                      Overwrite="true" WriteOnlyWhenDifferent="true" />

    <Message Importance="high" Text="$(_StampMessage)" />
  </Target>

</Project>
